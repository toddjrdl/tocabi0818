name: DyrosDynamicWalk

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym.
env: 
  numEnvs: ${resolve_default:4096,${...num_envs}}
  envSpacing: 5
  episodeLength: 32 # seconds
  enableDebugVis: False
  controlFrequencyInv: 2
  
  clipActions: 1.0

  NumSingleStepObs: 126
  NumAction: 13
  #numStates: 187
  height_emb_dim: 24
  numObservations: 126
  reward_version: v2 # v1: old reward, v2: new reward

  perturbation: False #False for default
  perturb_start_threshold: 0.35
  
  NumHis : 10
  NumSkip : 2

  initialHeight: 0.93
  cameraFollow: True

  # cost parameters
  deathCost: 0.0
  terminationHeight: 0.6

 # motionfile: 

  asset:
    assetFileName: "mjcf/dyros_tocabi/xml/dyros_tocabi.xml"

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

  

  terrain_cfg:
    mesh_type: "plane"        # ← 여기서 trimesh 사용 선언
    horizontal_scale: 0.5        # (필요시 편집)
    vertical_scale: 0.5          # (필요시 편집)
    border_size: 2.0             # (필요시 편집)
    curriculum: True
    selected:   false
    slope_treshold: 0.3

  priv_dim: 144

sim:
  dt: 0.002 #0.0005 #0.004 # 0.0005 #1/2000 
  substeps: 1
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.04
    max_depenetration_velocity: 10.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  randomize: False #True
  randomization_params:
    # specify which attributes to randomize for each actor type and property
    frequency: 2048   # Define how many environment steps between generating new randomizations
    # observations:
    #   range: [0, .005] # range for the white noise
    #   operation: "additive"
    #   distribution: "gaussian"
    # actions:
    #   range: [0., .02]
    #   operation: "additive"
    #   distribution: "gaussian"
    # sim_params: 
    #   gravity:
    #     range: [0, 0.4]
    #     operation: "additive"
    #     distribution: "gaussian"
    #     schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
    #     schedule_steps: 0
    actor_params:
      humanoid:
        # color: True
        rigid_body_properties:
          mass: 
            range: [0.8, 1.2]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "constant"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 0
        # rigid_shape_properties:
        #   friction:
        #     num_buckets: 500
        #     range: [0.7, 1.3]
        #     operation: "scaling"
        #     distribution: "uniform"
        #     schedule: "constant"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
        #     schedule_steps: 0
        #   restitution:
        #     range: [0., 0.7]
        #     operation: "scaling"
        #     distribution: "uniform"
        #     schedule: "constant"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
        #     schedule_steps: 0
        dof_properties:
          damping: 
            range: [0.0, 2.9]
            operation: "additive"
            distribution: "uniform"
            schedule: "constant"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 0
          armature:
            range: [0.8, 1.2]
            operation: "scaling"
            distribution: "uniform"
            schedule: "constant"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 0
          # friction: 
          #   range: [0.6, 1.4]
          #   operation: "scaling"
          #   distribution: "uniform"
          #   schedule: "constant"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
          #   schedule_steps: 0
          # stiffness: 
          #   range: [0.5, 1.5]
          #   operation: "scaling"
          #   distribution: "uniform"
          #   schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
          #   schedule_steps: 0
          # lower:
          #   range: [0, 0.01]
          #   operation: "additive"
          #   distribution: "gaussian"
          #   schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
          #   schedule_steps: 0
          # upper:
          #   range: [0, 0.01]
          #   operation: "additive"
          #   distribution: "gaussian"
          #   schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
          #   schedule_steps: 0
